// ComputerVision.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//

#include "stdafx.h"

#include "Common.h"


int main()
{
	std::string path = "c:\\image\\Lenna.png";
	cv::Mat mImage = cv::imread(path);

	cv::Mat mImage_mono;
	cv::cvtColor(mImage, mImage_mono, cv::COLOR_RGB2GRAY);

	unsigned char* pImage = mImage_mono.data;

	unsigned char* pImage2 = mImage.data;
	int width = mImage_mono.cols;
	int height = mImage_mono.rows;
	int threshold = 128;


	cv::Mat mImage_Filter = mImage_mono.clone();
	unsigned char* pImage_Filter = mImage_Filter.data;

	//for (int row = 0; row < height; row++)
	//{
	//	for (int col = 0; col < width; col++)
	//	{
	//		int index = row * width + col ;
	//		pImage[index] = (pImage[index] > threshold) ? 0 : 255;
	//	}
	//}

//	int* pHisto = new int[256]{ 0, };
	//int* pMask = new int[width*height]{ 0, };
	//int aHist[256] = { 0, };
	
	const int kernel_size = 100;
	const int kernel_size_half = 100 / 2;

	int kernel[kernel_size*kernel_size] = { 1,};

	////sharpness
	//int kernel[kernel_size*kernel_size] = { 0,-1,0
	//												,- 1,5,-1
	//												,0,-1,0 };
	//blur
	//int kernel[kernel_size*kernel_size] = { 1.0f/9,1.0f / 9, 9,
	//												1.0f / 9,1.0f / 9, 9,
	//												1.0f / 9,1.0f / 9, 9 };

	//blur
	//int kernel[kernel_size*kernel_size] = { 1.0f / 50,1.0f / 50, -10,
	//	1.0f / 50,1.0f / 50, -10,
	//	1.0f / 50,1.0f / 50, -10 };

	//int kernel[kernel_size*kernel_size] = { -1,-0,1
	//												,-1,-0,1
	//												,-1,-0,1 };

	//int kernel[kernel_size*kernel_size] = { -1,-1,-1
	//												,0,0,0
	//												,1,1,1 };

	//BOX
	//float kernel[kernel_size*kernel_size] = { 1.0f/9.0f, 1.0f / 9.0f,1.0f / 9.0f
	//												,1.0f / 9.0f,1.0f / 9.0f,1.0f / 9.0f
	//												,1.0f / 9.0f,1.0f / 9.0f,1.0f / 9.0f };
	//가우시안
	//float kernel[kernel_size*kernel_size] = { 0.0000f, 0.0000f ,0.0002f,0.0000f,0.0000f
	//												,0.0000f, 0.0113f ,0.0837f,0.0113f,0.0000f
	//												,0.0002f, 0.0837f ,0.6187f,0.0837f,0.0002f
	//												,0.0000f, 0.0113f ,0.0837f,0.0113f,0.0000f
	//												,0.0000f, 00.000f ,0.0002f,0.0000f,0.0000f };

	////모션
	/*float kernel[kernel_size*kernel_size] = { 0.0304f, 0.0501f ,0.0f,0.0f,0.0f
													,0.0501f, 0.1771f ,0.0519f,0.0f, 0.0f
													,0.0f, 0.0519f ,0.1771f,0.0519f,0.0f
													,0.0f, 0.0f ,0.0519f,0.1771f,0.0501f
													,0.0f, 0.0f ,0.0f,0.0501f,0.0304f };*/

	//float kernel[kernel_size*kernel_size] = { 0.1304f, 0.1501f ,0.0f,0.0f,0.0f
	//													,0.1501f, 0.2771f ,0.1519f,0.0f, 0.0f
	//													,0.0f, 0.1519f ,0.2771f,0.1519f,0.0f
	//													,0.0f, 0.0f ,0.1519f,0.2771f,0.1501f
	//													,0.0f, 0.0f ,0.0f,0.1501f,0.1304f };


	cv::Mat mImage_Thr;
//	cv::threshold(mImage, mImage_Thr, threshold, 255, cv::THRESH_BINARY);
	
	//cv::accumulate(mImage, mImage_Thr, mImage);

	cv::Mat mImage_B = mImage_mono.clone();
	unsigned char* pmImage_B = mImage_B.data;

	cv::Mat mImage_G = mImage_mono.clone();
	unsigned char* pmImage_G = mImage_G.data;

	cv::Mat mImage_R = mImage_mono.clone();
	unsigned char* pmImage_R = mImage_R.data;

	//cv::Mat mImage_AVG_B = mImage_mono.clone();
	//unsigned char* pImage_AVG_B = mImage_AVG_B.data;

	//cv::Mat mImage_AVG_G = mImage_mono.clone();
	//unsigned char* pImage_AVG_G = mImage_AVG_G.data;
	//cv::Mat mImage_AVG_R = mImage_mono.clone();
	//unsigned char* pImage_AVG_R = mImage_AVG_R.data;

//
	for(int row = 0; row < height ; row++)
	{
		for (int col = 0; col < width; col++)
		{
			int index = row * width+ col;
			pmImage_B[index] = pImage2[index * 3];
			pmImage_G[index] = pImage2[index * 3 + 1];
			pmImage_R[index] = pImage2[index * 3 + 2];
		}
	}

	int conv_B = 0;
	int conv_G = 0;
	int conv_R = 0;

	for (int row = kernel_size_half; row < kernel_size_half + 1; row++)
		for (int col = kernel_size_half; col < kernel_size_half + 1; col++)
		{
			int index = row * width + col;
			for (int k_row = 0; k_row < kernel_size; k_row++)
			{
				for (int k_col = 0; k_col < kernel_size; k_col++)
				{
					int k_index = k_row * kernel_size + k_col;

					int conv_idx = (row + k_row- kernel_size_half) * width + (col + k_col - kernel_size_half);
					////conv += pmImage_B[conv_idx] + pmImage_G[conv_idx] + pmImage_R[conv_idx];

					 conv_B += pmImage_B[conv_idx];
					 conv_G += pmImage_G[conv_idx];
					 conv_R += pmImage_R[conv_idx];
				}
			}
			conv_B =  conv_B / (kernel_size*kernel_size);
			conv_G = conv_G / (kernel_size*kernel_size);
			conv_R = conv_R / (kernel_size*kernel_size);
		}


	//for (int row = kernel_size_half; row < height- kernel_size_half; row++)
	//	for (int col = kernel_size_half; col < width- kernel_size_half; col++)
	//	{
	//		int conv = 0;
	//		int index = row * width + col;
	//		for (int k_row = 0; k_row < kernel_size; k_row++)
	//		{
	//			for (int k_col = 0; k_col < kernel_size; k_col++)
	//			{
	//				int k_index = k_row * kernel_size + k_col;

	//				int conv_idx = (row + k_row- kernel_size_half) * width + (col + k_col - kernel_size_half);
	//				conv += pImage[conv_idx] * kernel[k_index];
	//			}
	//		}
	//		//pImage_Filter[index] = (conv > 40) ? 0 : 255 ;
	//		pImage_Filter[index] = abs(conv);
	//	}


	

	//for (int row = 0; row < height; row++)
	//{
	//	for (int col = 0; col < width; col++)
	//	{
	//		int index = row * width + col;
	//		pHisto[pImage[index]]++; 
	//		// = ++(pHisto[pImage[index]]);
	//	}
	//}

	//cv::threshold(mImage, mImage, threshold, 255, cv::THRESH_BINARY);
	//for (int index = 0; index < height*width; index++)
	//{
	//		pImage[index] = (pImage[index] > threshold) ? 255 : 0;
	//		pHisto[pImage[index]]++;
	//}

	//cv::Mat mImage_Thr;
	//cv::threshold(mImage, mImage_Thr, threshold, 255, cv::THRESH_BINARY);

	//std::string path2 = "c:\\image\\bike_mono2.jpg";
	//cv::imwrite(path2, mImage);
	
	//std::string path_out = "c:\\image\\bike_mono.jpg";
	//cv::Mat mImage_Mono;
	//cv::cvtColor(mImage, mImage_Mono, cv::COLOR_RGB2BGR);

	//cv::imwrite(path_out, mImage_Mono);

	//std::string debug_window = "image_wnd";
	//cv::namedWindow(debug_window);
	//cv::imshow(debug_window, mImage_Mono);
	//cv::waitKey(0);
    return 0;
}

